# -*- coding: utf-8 -*-
"""projek_pertama_MLT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GPMIx3pdN3HD6jbebvJwrr5EOgRgfbe4

### Import Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import kagglehub
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns
import shutil
import os
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.metrics import precision_score, recall_score, f1_score

"""### Load Dataset"""

datakaggle = kagglehub.dataset_download("yasserh/breast-cancer-dataset")

print("Path to dataset files:", datakaggle)

source_dir = datakaggle
databreast = '/content/breast-cancer-dataset'

if not os.path.exists(databreast):
    os.makedirs(databreast)

shutil.copytree(source_dir, databreast, dirs_exist_ok=True)

print(f"Dataset copied from {source_dir} to {databreast}")

csv_file_path = os.path.join(databreast, 'breast-cancer.csv')
df = pd.read_csv(csv_file_path)
df

"""### Exploratory Data Analysis

#### Deskripsi Variabel
"""

df.info()

df.describe()

print(df['diagnosis'].value_counts())

"""#### Menangani Missing Values"""

missing_counts = df.isnull().sum()
print(missing_counts)

total_missing = df.isnull().sum().sum()
print(f"Total missing values in dataset: {total_missing}")

"""#### Menangani Outliers"""

sns.boxplot(x=df['diagnosis'])
plt.title('diagnosis')
plt.show()

sns.boxplot(x=df['radius_mean'])
plt.title('radius_mean')
plt.show()

sns.boxplot(x=df['texture_mean'])
plt.title('texture_mean')
plt.show()

sns.boxplot(x=df['perimeter_mean'])
plt.title('perimeter_mean')
plt.show()

sns.boxplot(x=df['area_mean'])
plt.title('area_mean')
plt.show()

sns.boxplot(x=df['compactness_mean'])
plt.title('compactness_mean')
plt.show()

sns.boxplot(x=df['concavity_mean'])
plt.title('concavity_mean')
plt.show()

sns.boxplot(x=df['concave points_mean'])
plt.title('concave points_mean')
plt.show()

sns.boxplot(x=df['symmetry_mean'])
plt.title('symmetry_mean')
plt.show()

sns.boxplot(x=df['fractal_dimension_mean'])
plt.title('fractal_dimension_mean')
plt.show()

sns.boxplot(x=df['radius_se'])
plt.title('radius_se')
plt.show()

sns.boxplot(x=df['texture_se'])
plt.title('texture_se')
plt.show()

sns.boxplot(x=df['perimeter_se'])
plt.title('perimeter_se')
plt.show()

sns.boxplot(x=df['area_se'])
plt.title('area_se')
plt.show()

sns.boxplot(x=df['smoothness_se'])
plt.title('smoothness_se')
plt.show()

sns.boxplot(x=df['compactness_se'])
plt.title('compactness_se')
plt.show()

sns.boxplot(x=df['concavity_se'])
plt.title('concavity_se')
plt.show()

sns.boxplot(x=df['concave points_se'])
plt.title('concave points_se')
plt.show()

sns.boxplot(x=df['symmetry_se'])
plt.title('symmetry_se')
plt.show()

sns.boxplot(x=df['fractal_dimension_se'])
plt.title('fractal_dimension_se')
plt.show()

sns.boxplot(x=df['radius_worst'])
plt.title('radius_worst')
plt.show()

sns.boxplot(x=df['texture_worst'])
plt.title('texture_worst')
plt.show()

sns.boxplot(x=df['perimeter_worst'])
plt.title('perimeter_worst')
plt.show()

sns.boxplot(x=df['area_worst'])
plt.title('area_worst')
plt.show()

sns.boxplot(x=df['smoothness_worst'])
plt.title('smoothness_worst')
plt.show()

sns.boxplot(x=df['compactness_worst'])
plt.title('compactness_worst')
plt.show()

sns.boxplot(x=df['concavity_worst'])
plt.title('concavity_worst')
plt.show()

sns.boxplot(x=df['concave points_worst'])
plt.title('concave points_worst')
plt.show()

sns.boxplot(x=df['symmetry_worst'])
plt.title('symmetry_worst')
plt.show()

sns.boxplot(x=df['fractal_dimension_worst'])
plt.title('fractal_dimension_worst')
plt.show()

"""#### Univariate Analysis"""

numerical_features = df.select_dtypes(include=np.number).columns.tolist()
numerical_features.remove('id')

categorical_features = df.select_dtypes(exclude=np.number).columns.tolist()

print("Numerical features:", numerical_features)
print("Categorical features:", categorical_features)

"""##### Categorical Feature"""

for feature in categorical_features:
    plt.figure(figsize=(6, 4))
    sns.countplot(x=df[feature])
    plt.title(f'Distribution of {feature}')
    plt.xlabel(feature)
    plt.ylabel('Count')
    plt.show()

"""##### Numerical Features"""

plt.figure(figsize=(15, 20))
for i, feature in enumerate(numerical_features):
    plt.subplot(6, 5, i + 1)
    sns.histplot(data=df, x=feature, kde=True)
    plt.title(f'{feature}')
    plt.xlabel(feature)
    plt.ylabel('Frequency')
plt.tight_layout()
plt.show()

"""##### Multivariate Analysis"""

sns.pairplot(df, vars=numerical_features, hue='diagnosis', palette='viridis')
plt.suptitle('Pairplot of Numerical Features by Diagnosis', y=1.02)
plt.show()

for feature in numerical_features:
    sns.catplot(x='diagnosis', y=feature, data=df, kind='bar', hue='diagnosis', palette='viridis', height=4, aspect=1.5)
    plt.suptitle(f'{feature} by Diagnosis', y=1.02)
    plt.show()

correlation_matrix = df[numerical_features].corr()

plt.figure(figsize=(18, 16))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap of Numerical Features')
plt.show()

"""### Data Preparation

#### Encoding Fitur Kategorikal
"""

df_encoded = pd.get_dummies(df, columns=['diagnosis'], prefix='diagnosis')

display(df_encoded.head())

"""#### Standarisasi"""

X = df_encoded.drop(columns=['id', 'diagnosis_B', 'diagnosis_M'])

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

"""#### Reduksi Dimensi dengan PCA"""

pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

print("Explained variance ratio per principal component:")
print(pca.explained_variance_ratio_)

df_pca = pd.DataFrame(data=X_pca, columns=['PC1', 'PC2'])
df_pca['diagnosis'] = df['diagnosis']

plt.figure(figsize=(8,6))
sns.scatterplot(x='PC1', y='PC2', hue='diagnosis', data=df_pca, palette='viridis')
plt.title('PCA of Breast Cancer Dataset')
plt.show()

"""### Train-Test Split"""

le = LabelEncoder()
y = le.fit_transform(df['diagnosis'])

X = X_pca

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.1, random_state=42, stratify=y
)

"""### Model Development

#### Model Development dengan Logistic Regression
"""

lr_model = LogisticRegression(max_iter=1000, random_state=42)
lr_model.fit(X_train, y_train)

y_pred_lr = lr_model.predict(X_test)

print("Logistic Regression Results:")
print(f"Accuracy: {accuracy_score(y_test, y_pred_lr):.4f}")
print("Classification Report:")
print(classification_report(y_test, y_pred_lr, target_names=le.classes_))
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_lr))

"""#### Model Development dengan Random Forest"""

rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

y_pred_rf = rf_model.predict(X_test)

print("Random Forest Results:")
print(f"Accuracy: {accuracy_score(y_test, y_pred_rf):.4f}")
print("Classification Report:")
print(classification_report(y_test, y_pred_rf, target_names=le.classes_))
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_rf))

"""#### Model Development dengan Support Vector Machine"""

svm_model = SVC(kernel='rbf', probability=True, random_state=42)
svm_model.fit(X_train, y_train)

y_pred_svm = svm_model.predict(X_test)

print("SVM Results:")
print(f"Accuracy: {accuracy_score(y_test, y_pred_svm):.4f}")
print("Classification Report:")
print(classification_report(y_test, y_pred_svm, target_names=le.classes_))
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_svm))

"""### Evaluasi Model"""

metrics = []

models_preds = {
    'Logistic Regression': y_pred_lr,
    'Random Forest': y_pred_rf,
    'SVM': y_pred_svm
}

for model_name, y_pred in models_preds.items():
    acc = accuracy_score(y_test, y_pred)
    prec = precision_score(y_test, y_pred)
    rec = recall_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)

    metrics.append({
        'Model': model_name,
        'Accuracy': acc,
        'Precision': prec,
        'Recall': rec,
        'F1-Score': f1
    })

# Buat DataFrame untuk menampilkan hasil
df_metrics = pd.DataFrame(metrics)

print("Evaluation Metrics Comparison:")
print(df_metrics)